{
  "React Component": {
    "prefix": "react-component",
    "description": "Creates a react function component without props",
    "body": [
      "import React from \"react\"",
      "",
      "export interface ${1:name}Props {",
      "\t${0}",
      "}",
      "",
      "const ${1:name}Component = (props: ${1:name}Props) => {",
      "}",
      "",
      "export const ${1:name} = React.memo(${1:name}Component)"
    ],
    "scope": "typescriptreact"
  },
  "React Propless Component": {
    "prefix": "react-component-propless",
    "description": "Creates a react function component without props",
    "body": ["export const ${1:name} = () => (${0})"],
    "scope": "typescriptreact"
  },
  "React Service": {
    "prefix": "react-service",
    "description": "Creates a react service context with a provider",
    "body": [
      "import React, { createContext } from \"react\"",
      "",
      "import { createContextUser } from \"utils/createContextUser\"",
      "",
      "interface ${1:name}ServiceProps {",
      "\t${0}",
      "}",
      "",
      "const ${1:name}Service = createContext<${1:name}ServiceProps | undefined>(undefined)",
      "${1:name}Service.displayName = \"${1:name}Service\"",
      "export const use${1:name}Service = createContextUser(${1:name}Service)",
      "",
      "export interface Provide${1:name}ServiceProps {",
      "\tchildren: React.ReactNode",
      "}",
      "",
      "const Provide${1:name}ServiceComponent = ({children}: Provide${1:name}ServiceProps) => {",
      "\treturn (",
      "\t\t<${1:name}Service.Provider value={}>{children}</${1:name}Service.Provider>",
      "\t)",
      "}",
      "",
      "export const Provide${1:name}Service = React.memo(Provide${1:name}ServiceComponent)"
    ],
    "scope": "typescriptreact"
  }
}
